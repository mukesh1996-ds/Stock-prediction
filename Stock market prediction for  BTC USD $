{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Stock market prediction for  BTC USD $","provenance":[],"authorship_tag":"ABX9TyPaKPiw+/x4FysX8LXENYLT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":69,"metadata":{"id":"_ueq36T_BOMv","executionInfo":{"status":"ok","timestamp":1644069551797,"user_tz":-330,"elapsed":553,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"outputs":[],"source":["# Loading all the depencencise\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression, Ridge, RidgeCV, Lasso, LassoCV\n","from sklearn import metrics\n","import matplotlib.pyplot as plt\n","from matplotlib import style\n","plt.style.use('bmh')\n","\n"]},{"cell_type":"code","source":["style.use('ggplot')"],"metadata":{"id":"NGY6RXCQLEXC","executionInfo":{"status":"ok","timestamp":1644069554770,"user_tz":-330,"elapsed":343,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["training_data = pd.read_csv('BTC-USD Training Data - 1st Jan 2016 to 1st Jan 2022.csv')\n","training_data.head()\n","\n","testing_data = pd.read_csv('BTC-USD Out of Time Testing 1st Jan 2022 to 4th Feb 2022.csv')\n","testing_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"d8f1MszjByPf","executionInfo":{"status":"ok","timestamp":1644069415933,"user_tz":-330,"elapsed":13,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"2f3ab88a-13ad-48e8-8d6d-a85c9f3ee4d9"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-1b5fcbf6-8803-48d6-b15e-f00c1309e15c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Adj Close</th>\n","      <th>Volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2022-01-01</td>\n","      <td>46311.746094</td>\n","      <td>47827.312500</td>\n","      <td>46288.484375</td>\n","      <td>47686.812500</td>\n","      <td>47686.812500</td>\n","      <td>24582667004</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2022-01-02</td>\n","      <td>47680.925781</td>\n","      <td>47881.406250</td>\n","      <td>46856.937500</td>\n","      <td>47345.218750</td>\n","      <td>47345.218750</td>\n","      <td>27951569547</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2022-01-03</td>\n","      <td>47343.542969</td>\n","      <td>47510.726563</td>\n","      <td>45835.964844</td>\n","      <td>46458.117188</td>\n","      <td>46458.117188</td>\n","      <td>33071628362</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2022-01-04</td>\n","      <td>46458.851563</td>\n","      <td>47406.546875</td>\n","      <td>45752.464844</td>\n","      <td>45897.574219</td>\n","      <td>45897.574219</td>\n","      <td>42494677905</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2022-01-05</td>\n","      <td>45899.359375</td>\n","      <td>46929.046875</td>\n","      <td>42798.222656</td>\n","      <td>43569.003906</td>\n","      <td>43569.003906</td>\n","      <td>36851084859</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b5fcbf6-8803-48d6-b15e-f00c1309e15c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1b5fcbf6-8803-48d6-b15e-f00c1309e15c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1b5fcbf6-8803-48d6-b15e-f00c1309e15c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["         Date          Open  ...     Adj Close       Volume\n","0  2022-01-01  46311.746094  ...  47686.812500  24582667004\n","1  2022-01-02  47680.925781  ...  47345.218750  27951569547\n","2  2022-01-03  47343.542969  ...  46458.117188  33071628362\n","3  2022-01-04  46458.851563  ...  45897.574219  42494677905\n","4  2022-01-05  45899.359375  ...  43569.003906  36851084859\n","\n","[5 rows x 7 columns]"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# Checking the null values\n","training_data.isnull().sum()\n","testing_data.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ntdX203TCUKz","executionInfo":{"status":"ok","timestamp":1644069417252,"user_tz":-330,"elapsed":6,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"39f8a85d-2781-4a09-e753-8c09e9a42a7b"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Date         0\n","Open         0\n","High         0\n","Low          0\n","Close        0\n","Adj Close    0\n","Volume       0\n","dtype: int64"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# According to the description we will only consider the required column and delete the unrequired column.\n","\n","training_data.drop(['Date', 'Adj Close'], axis = 1, inplace = True)\n"],"metadata":{"id":"XE5RBw8pCjdf","executionInfo":{"status":"ok","timestamp":1644069418851,"user_tz":-330,"elapsed":4,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["testing_data.drop(['Date', 'Adj Close'], axis = 1, inplace = True)"],"metadata":{"id":"H63pCtVPDP7N","executionInfo":{"status":"ok","timestamp":1644069420809,"user_tz":-330,"elapsed":442,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["x = training_data[['High', 'Open', 'Low', 'Volume']].values\n","print(x)\n","y = training_data[['Close']].values\n","print(y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mTAqUNL0EmuP","executionInfo":{"status":"ok","timestamp":1644069422576,"user_tz":-330,"elapsed":4,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"9c92c789-bb4f-4879-a722-16503d43ebca"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["[[4.36246002e+02 4.30721008e+02 4.27515015e+02 3.62789000e+07]\n"," [4.36062012e+02 4.34622009e+02 4.31869995e+02 3.00966000e+07]\n"," [4.33743011e+02 4.33578003e+02 4.24705994e+02 3.96338000e+07]\n"," ...\n"," [4.78799648e+04 4.64906055e+04 4.60603125e+04 2.66864910e+10]\n"," [4.84725273e+04 4.71693711e+04 4.58199531e+04 3.69741724e+10]\n"," [4.78273125e+04 4.63117461e+04 4.62884844e+04 2.45826670e+10]]\n","[[  434.334015]\n"," [  433.437988]\n"," [  430.010986]\n"," ...\n"," [47178.125   ]\n"," [46306.445313]\n"," [47686.8125  ]]\n"]}]},{"cell_type":"code","source":["# To bulid a model we also need to split the training_data\n","x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.2, random_state = 42) "],"metadata":{"id":"xcPAPATaDiOy","executionInfo":{"status":"ok","timestamp":1644069424070,"user_tz":-330,"elapsed":5,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["linear_regrssion = LinearRegression()\n","linear_regrssion.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OE5QJmZyE9lU","executionInfo":{"status":"ok","timestamp":1644069425603,"user_tz":-330,"elapsed":7,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"373752d1-c29d-4bb7-be71-0e4fe5af3118"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["y_pred = linear_regrssion.predict(x_test)\n","print(y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eO5_rLq_FP4Y","executionInfo":{"status":"ok","timestamp":1644069427042,"user_tz":-330,"elapsed":5,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"6169183e-903c-40d8-a217-d44d128cd8ae"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["[[  899.47602483]\n"," [ 2747.16337818]\n"," [ 7993.08146522]\n"," [  654.51732238]\n"," [ 8537.88741897]\n"," [ 6171.03087553]\n"," [  931.1011101 ]\n"," [  615.96340663]\n"," [  739.78775853]\n"," [  421.36549566]\n"," [  448.62255785]\n"," [  378.83663985]\n"," [ 6641.94263982]\n"," [39472.35196321]\n"," [ 7504.13007634]\n"," [36226.49092804]\n"," [51907.82244622]\n"," [15243.82753482]\n"," [ 5258.12535231]\n"," [10346.56966536]\n"," [ 6962.82907548]\n"," [ 3898.33961728]\n"," [45457.71057063]\n"," [14059.74295139]\n"," [44672.02269741]\n"," [13901.12149286]\n"," [ 3733.34652957]\n"," [ 3578.13809005]\n"," [ 2468.90165321]\n"," [ 2914.15345734]\n"," [ 8556.78475982]\n"," [  702.88975975]\n"," [ 6520.38165132]\n"," [  748.9109267 ]\n"," [ 6504.45157398]\n"," [ 9542.25015608]\n"," [ 2290.03129387]\n"," [ 8006.72867159]\n"," [ 8588.00932277]\n"," [ 8141.88374831]\n"," [ 3567.32229118]\n"," [ 1167.54659681]\n"," [ 9359.0098833 ]\n"," [11003.13439165]\n"," [ 9498.65109644]\n"," [ 6907.55425757]\n"," [ 6515.78467468]\n"," [ 7768.29301137]\n"," [  455.30778041]\n"," [ 1111.68674684]\n"," [ 9827.26229224]\n"," [ 9316.17518434]\n"," [34830.55485814]\n"," [ 6770.79805131]\n"," [ 4243.38917923]\n"," [ 5735.82909173]\n"," [22843.26067325]\n"," [ 9923.64051732]\n"," [10234.61033382]\n"," [ 3442.54626948]\n"," [  731.53128086]\n"," [19120.8252949 ]\n"," [  422.93043597]\n"," [11069.47540515]\n"," [  789.08870057]\n"," [10527.96368352]\n"," [  983.82066029]\n"," [31956.34038271]\n"," [ 7760.81131946]\n"," [  732.68120641]\n"," [61240.36879348]\n"," [  609.72543102]\n"," [ 9645.7664638 ]\n"," [ 7152.59178407]\n"," [ 9587.05708473]\n"," [ 4057.30911027]\n"," [ 3697.1742319 ]\n"," [ 4049.97635537]\n"," [ 8108.95379273]\n"," [10800.08018547]\n"," [  415.90306724]\n"," [ 7392.22588151]\n"," [ 8818.18887198]\n"," [11368.59886533]\n"," [ 7683.65235311]\n"," [ 4006.34403101]\n"," [ 8986.88383081]\n"," [  781.96975212]\n"," [ 1268.37237694]\n"," [  664.36284857]\n"," [50909.03344638]\n"," [24340.0154744 ]\n"," [ 1209.90060741]\n"," [55712.84151001]\n"," [63007.54708801]\n"," [ 1002.62786264]\n"," [54953.26645377]\n"," [ 8099.40203336]\n"," [  422.53570296]\n"," [ 4254.60407111]\n"," [10630.52943141]\n"," [19274.24790346]\n"," [ 9858.44783257]\n"," [ 8326.68783507]\n"," [ 3897.75000824]\n"," [ 8501.44673862]\n"," [  644.58607922]\n"," [40093.70956827]\n"," [  797.42708509]\n"," [11449.84556116]\n"," [ 6487.31763503]\n"," [ 8039.12501437]\n"," [  700.95098625]\n"," [  434.25719185]\n"," [  790.57872551]\n"," [11186.37171317]\n"," [  413.40200577]\n"," [ 1181.27017166]\n"," [42365.84639249]\n"," [10034.33627663]\n"," [45256.95697237]\n"," [ 9790.52905153]\n"," [39062.77106753]\n"," [65919.8090402 ]\n"," [11701.68756487]\n"," [ 4798.13043038]\n"," [ 6801.63268186]\n"," [40655.16592021]\n"," [ 9820.60423185]\n"," [ 6584.16081251]\n"," [ 5336.86405411]\n"," [ 6434.13082011]\n"," [ 3772.21637669]\n"," [11667.19097381]\n"," [ 3945.08260696]\n"," [  576.35113481]\n"," [  667.78621017]\n"," [ 1810.51285736]\n"," [ 7847.28635647]\n"," [  964.3117675 ]\n"," [16780.65824273]\n"," [  996.87787723]\n"," [33415.43055779]\n"," [ 5355.53901728]\n"," [  457.4213754 ]\n"," [58321.38031279]\n"," [  612.2284425 ]\n"," [ 2252.73829771]\n"," [11407.86231733]\n"," [ 1023.26365216]\n"," [ 3862.14084298]\n"," [47299.38642058]\n"," [  572.20452373]\n"," [ 1054.615997  ]\n"," [  617.97780996]\n"," [  640.66126725]\n"," [  456.99412444]\n"," [ 6181.41865026]\n"," [ 9725.04793759]\n"," [11433.51873989]\n"," [11393.01649539]\n"," [ 1310.53739019]\n"," [  440.85908079]\n"," [10124.78925073]\n"," [41716.30531408]\n"," [11485.34519143]\n"," [44777.25015176]\n"," [  625.22385475]\n"," [ 3631.78739617]\n"," [  581.41761869]\n"," [ 6692.99547886]\n"," [ 6663.16676837]\n"," [13776.15944258]\n"," [56292.60069417]\n"," [10035.13951716]\n"," [46396.45717848]\n"," [  917.28219178]\n"," [11831.13348843]\n"," [ 6415.27785765]\n"," [ 8662.77669773]\n"," [ 9933.38381189]\n"," [  652.56826729]\n"," [34354.03118061]\n"," [58271.37785078]\n"," [  638.56469996]\n"," [10055.47660876]\n"," [ 1335.74882905]\n"," [36543.47166583]\n"," [  661.36961068]\n"," [ 4281.31975105]\n"," [ 7456.25122766]\n"," [ 2837.46713983]\n"," [ 9203.57148316]\n"," [  638.53735652]\n"," [46059.78606057]\n"," [ 9195.8553246 ]\n"," [10156.90706507]\n"," [ 6456.22332615]\n"," [ 9358.64652824]\n"," [ 7630.96216981]\n"," [34129.29308761]\n"," [ 3650.94805222]\n"," [51295.21192781]\n"," [ 7228.21857523]\n"," [ 5087.17630294]\n"," [ 6203.85053555]\n"," [ 3725.26562352]\n"," [  450.09390403]\n"," [ 6128.74601586]\n"," [ 6762.47244863]\n"," [12010.55042032]\n"," [  428.87925069]\n"," [  582.13562265]\n"," [ 1247.92925051]\n"," [11636.18686324]\n"," [ 4551.5290738 ]\n"," [ 8373.97996893]\n"," [ 2537.29617611]\n"," [ 4032.86390233]\n"," [ 1231.60113849]\n"," [11719.67063422]\n"," [ 1420.28007239]\n"," [51794.55034376]\n"," [51891.8993378 ]\n"," [ 8774.15343529]\n"," [ 1038.09382719]\n"," [ 6507.96120932]\n"," [ 5195.28138392]\n"," [ 6647.40179872]\n"," [ 7904.60809721]\n"," [36028.21892697]\n"," [ 3579.71038488]\n"," [ 6568.78052063]\n"," [58232.90848965]\n"," [  405.31141891]\n"," [ 5193.97950344]\n"," [11019.49554549]\n"," [ 7643.41764145]\n"," [32949.81196741]\n"," [  654.52660867]\n"," [10307.61254207]\n"," [ 7566.91421143]\n"," [13007.89328003]\n"," [ 7155.66209422]\n"," [57586.15416907]\n"," [32081.69429918]\n"," [  770.29405124]\n"," [ 9151.17395728]\n"," [  415.75215095]\n"," [60489.47796474]\n"," [ 6470.54140949]\n"," [ 3467.69943177]\n"," [ 9879.74794571]\n"," [  575.81879025]\n"," [  607.87602615]\n"," [  607.18561199]\n"," [55981.24853488]\n"," [ 2576.89719686]\n"," [ 4123.05338099]\n"," [57825.20089409]\n"," [10499.95016882]\n"," [  571.60143136]\n"," [  417.6018104 ]\n"," [ 8200.40655085]\n"," [ 9217.53564957]\n"," [ 9766.68613246]\n"," [ 2581.23532989]\n"," [ 6297.31925328]\n"," [ 7528.36247679]\n"," [ 3916.44491869]\n"," [ 7718.33794695]\n"," [  446.76265838]\n"," [23696.40554978]\n"," [  674.05010227]\n"," [ 2442.81073308]\n"," [18570.5967464 ]\n"," [  407.28043275]\n"," [37097.92840955]\n"," [ 6771.59819366]\n"," [16615.34080826]\n"," [33423.56150357]\n"," [48418.68362162]\n"," [ 6453.09772232]\n"," [15472.94716264]\n"," [ 9363.05531295]\n"," [ 9497.02931422]\n"," [38486.88307039]\n"," [ 1260.69290493]\n"," [ 1068.94557071]\n"," [63984.16080672]\n"," [  634.18434072]\n"," [43338.44358904]\n"," [ 1272.4593284 ]\n"," [ 9060.63113096]\n"," [ 8369.84099108]\n"," [ 3998.08686861]\n"," [ 7250.94257468]\n"," [ 5390.36636113]\n"," [ 2544.4867668 ]\n"," [15876.04888157]\n"," [  655.51574388]\n"," [10240.63810881]\n"," [  675.62756889]\n"," [54132.24736536]\n"," [ 9396.56624617]\n"," [10719.44359098]\n"," [  588.5504007 ]\n"," [ 4090.40418528]\n"," [  575.91008758]\n"," [10170.60985181]\n"," [ 3353.71760178]\n"," [ 9322.53413899]\n"," [ 3681.18983566]\n"," [ 8755.92247374]\n"," [ 8952.40812148]\n"," [51276.07856614]\n"," [63055.67509971]\n"," [ 2469.35986743]\n"," [  429.7793133 ]\n"," [ 6250.79169439]\n"," [  656.60310437]\n"," [ 9227.53196879]\n"," [26307.80919418]\n"," [ 1242.03233092]\n"," [15892.59818206]\n"," [ 1182.50943229]\n"," [ 9374.06684314]\n"," [ 7428.15284517]\n"," [ 3419.39483531]\n"," [ 6378.92344251]\n"," [  735.23077345]\n"," [ 6241.41357937]\n"," [34179.28959043]\n"," [48271.63746865]\n"," [ 8098.46555006]\n"," [ 3460.36769738]\n"," [ 9314.57369425]\n"," [ 7169.24491817]\n"," [ 2640.06171163]\n"," [33138.22824557]\n"," [  988.62744116]\n"," [ 8385.02849934]\n"," [34664.15626056]\n"," [  707.00110597]\n"," [ 3646.79808072]\n"," [  428.75510743]\n"," [10275.4397097 ]\n"," [  450.98045136]\n"," [ 1151.88897964]\n"," [ 6765.85574194]\n"," [  881.5295931 ]\n"," [39246.15836057]\n"," [10532.7383926 ]\n"," [57041.47248608]\n"," [  461.60097293]\n"," [  420.12484241]\n"," [ 2707.15353131]\n"," [61622.68856952]\n"," [59686.53686132]\n"," [56498.90134449]\n"," [11361.11939864]\n"," [ 2518.04678808]\n"," [ 6437.41503718]\n"," [ 4818.51048399]\n"," [10051.22749686]\n"," [ 8516.67649642]\n"," [13315.4282554 ]\n"," [ 6375.60389966]\n"," [ 8690.34267495]\n"," [ 6333.34877803]\n"," [ 7368.2050707 ]\n"," [ 8934.52348565]\n"," [ 4050.28849326]\n"," [ 7337.39656211]\n"," [  645.38929257]\n"," [ 4818.579269  ]\n"," [ 4406.82778179]\n"," [11465.77965271]\n"," [ 3910.49411437]\n"," [10388.58285698]\n"," [35625.79292796]\n"," [ 6340.91666825]\n"," [66915.49719426]\n"," [ 9200.66684592]\n"," [ 6884.47488695]\n"," [ 8742.19499075]\n"," [58981.83609526]\n"," [ 6448.85570836]\n"," [ 6655.50973135]\n"," [ 9446.16117582]\n"," [ 1754.53547034]\n"," [ 7439.66824084]\n"," [11905.9369119 ]\n"," [  417.41698683]\n"," [ 5758.93608138]\n"," [47511.58963936]\n"," [10568.9537174 ]\n"," [ 6344.71668458]\n"," [11451.27739209]\n"," [ 7203.42447629]\n"," [10431.18041404]\n"," [57680.50820747]\n"," [ 3874.31369471]\n"," [ 6493.13812629]\n"," [38647.158317  ]\n"," [ 9128.95889482]\n"," [38113.44958077]\n"," [  658.89535791]\n"," [ 7498.36112222]\n"," [ 4196.4583506 ]\n"," [11653.45206953]\n"," [38884.66075809]\n"," [49458.72633788]\n"," [ 4040.60462368]\n"," [ 8234.30186106]\n"," [ 3222.20280689]\n"," [  402.88553326]\n"," [32211.58171637]\n"," [40432.63481835]\n"," [ 2587.65210681]\n"," [  678.40953928]\n"," [  419.25579389]\n"," [  626.31114168]\n"," [ 1179.39935339]\n"," [ 6106.08093012]\n"," [ 6278.25942427]\n"," [  700.87840485]\n"," [10013.47038833]\n"," [ 4574.01972867]\n"," [ 4108.85879302]\n"," [  438.92509918]\n"," [  413.98030459]\n"," [ 8869.28712992]\n"," [53380.16982831]\n"," [58687.83995194]\n"," [10976.84970868]\n"," [11494.32308867]\n"," [ 6441.32841202]\n"," [ 8626.20088041]]\n"]}]},{"cell_type":"code","source":["linear_regrssion.intercept_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l8Bw6hKxFfCz","executionInfo":{"status":"ok","timestamp":1644069431373,"user_tz":-330,"elapsed":342,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"eacb5b3c-b050-425c-dd9b-888d83dadd0f"},"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.58203912])"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["linear_regrssion.coef_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rgocL9aBGtVt","executionInfo":{"status":"ok","timestamp":1644069432973,"user_tz":-330,"elapsed":6,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"7c6a58c1-3294-4e7f-c825-4ed0ee0da1ee"},"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 8.95328980e-01, -5.28960655e-01,  6.28424486e-01,\n","         5.64346347e-10]])"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["# predict new data\n","new_output = linear_regrssion.predict([[46311.746094\t,47827.312500\t,46288.484375, 24582667004]])\n","print(new_output)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mHAN5XpSHWj5","executionInfo":{"status":"ok","timestamp":1644069434842,"user_tz":-330,"elapsed":4,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"6cbbcc16-c04b-4438-e9b8-2e9066840a12"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["[[45269.75401324]]\n"]}]},{"cell_type":"code","source":["# Dumping the linear model\n","import pickle as pkl\n","linear_model_BTC = pkl.dump(linear_regrssion, open('linear_model.pkl', 'wb'))"],"metadata":{"id":"WS262mCeH13O","executionInfo":{"status":"ok","timestamp":1644069436289,"user_tz":-330,"elapsed":3,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["# Opening the pickle file and predicting the value\n","model = pkl.load(open('linear_model.pkl', 'rb'))\n","result = model.predict([[ 46311.746094\t,47827.312500\t,46288.484375, 24582667004]])\n","print('the resulted value is ', result.round(2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JC6i28EuITJU","executionInfo":{"status":"ok","timestamp":1644069437651,"user_tz":-330,"elapsed":7,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"e811e6a6-16f0-4a3b-c263-257abc7daac5"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["the resulted value is  [[45269.75]]\n"]}]},{"cell_type":"code","source":["# Model evaluation\n","\n","# r^2\n","score = linear_regrssion.score(x_test,y_test)\n","print('the score value is:', score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P4H-ToERIjwx","executionInfo":{"status":"ok","timestamp":1644069439559,"user_tz":-330,"elapsed":6,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"7fe3e1dc-10a6-410f-ae34-8c05204d913d"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["the score value is: 0.9996756009365523\n"]}]},{"cell_type":"code","source":["# Regularization:\n","# lassoCV\n","print('The lassoCV is used to find the best parameter for this model.')\n","\n","lasso_model_cv = LassoCV(cv = 10, max_iter=2000000, normalize=True)\n","lasso_model_cv.fit(x_train,y_train)\n","print(\"The alpha value for this model is \",lasso_model_cv.alpha_)\n","print(\"The score value by lasso_model_cv is \",lasso_model_cv.score(x_test,y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2a0MRWdCI4wM","executionInfo":{"status":"ok","timestamp":1644069440967,"user_tz":-330,"elapsed":7,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"9bcfe26e-6d0e-4951-9100-aaccd2ca525d"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["The lassoCV is used to find the best parameter for this model.\n","The alpha value for this model is  0.3936522700213656\n","The score value by lasso_model_cv is  0.9993413109220969\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:1571: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n","  FutureWarning,\n"]}]},{"cell_type":"code","source":["# lasso\n","lasso_model = Lasso(alpha=lasso_model_cv.alpha_)\n","lasso_model.fit(x_train, y_train)\n","print('the score value for lasso_model is', lasso_model.score(x_test,y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UOIjM9IzJDNf","executionInfo":{"status":"ok","timestamp":1644069442455,"user_tz":-330,"elapsed":5,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"b9fb63f2-295b-4171-df72-d7eb88169959"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["the score value for lasso_model is 0.9995805820912891\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_coordinate_descent.py:648: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 1.282e+08, tolerance: 4.773e+07\n","  coef_, l1_reg, l2_reg, X, y, max_iter, tol, rng, random, positive\n"]}]},{"cell_type":"code","source":["# model dump:\n","lasso_model = pkl.dump(lasso_model, open('lasso_model.pickle', 'wb'))"],"metadata":{"id":"HFJU37AtJIoe","executionInfo":{"status":"ok","timestamp":1644069444062,"user_tz":-330,"elapsed":5,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["#RidgeCV\n","print('The RidgeCV is used to find the best parameter for this model.')\n","ridge_model_cv = RidgeCV(alphas= (0.1,1.0,10), cv= 10, normalize= True)\n","ridge_model_cv.fit(x_train,y_train)\n","print(\"The alpha value for this model is \",ridge_model_cv.alpha_)\n","print(\"The score value by ridge_model_cv is \",ridge_model_cv.score(x_test,y_test))\n","# lasso\n","ridge_model = Ridge(alpha=ridge_model_cv.alpha_)\n","ridge_model.fit(x_train, y_train)\n","print('the score value for ridge_model is', ridge_model.score(x_test,y_test))\n","# model dump:\n","ridge_model = pkl.dump(ridge_model, open('ridge_model.pkl', 'wb'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VYv5KExqJbl1","executionInfo":{"status":"ok","timestamp":1644069445634,"user_tz":-330,"elapsed":6,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"55e6a7ab-163e-4ae0-87c8-ae8418c6864c"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["The RidgeCV is used to find the best parameter for this model.\n","The alpha value for this model is  0.1\n","The score value by ridge_model_cv is  0.9969067973700279\n","the score value for ridge_model is 0.9996756009365805\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n","If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n","\n","from sklearn.pipeline import make_pipeline\n","\n","model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n","\n","If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n","\n","kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n","model.fit(X, y, **kwargs)\n","\n","Set parameter alpha to: original_alpha * n_samples. \n","  FutureWarning,\n"]}]},{"cell_type":"code","source":["result = pd.DataFrame({'Actual':y_test.flatten(), 'Predicted':y_pred.flatten()})\n","result.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"NM0-NYlFKn8r","executionInfo":{"status":"ok","timestamp":1644069446907,"user_tz":-330,"elapsed":8,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"5202136c-3e49-47ab-ca70-bf4f22683258"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-f7a00c15-4165-4ba5-9076-8de8d3615466\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>907.937988</td>\n","      <td>899.476025</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2717.020020</td>\n","      <td>2747.163378</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7884.909180</td>\n","      <td>7993.081465</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>655.046997</td>\n","      <td>654.517322</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8660.700195</td>\n","      <td>8537.887419</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7a00c15-4165-4ba5-9076-8de8d3615466')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f7a00c15-4165-4ba5-9076-8de8d3615466 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f7a00c15-4165-4ba5-9076-8de8d3615466');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        Actual    Predicted\n","0   907.937988   899.476025\n","1  2717.020020  2747.163378\n","2  7884.909180  7993.081465\n","3   655.046997   654.517322\n","4  8660.700195  8537.887419"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","source":["import math\n","barbargraph = result.head(20)\n","graph.plot(kind = 'bar')"],"metadata":{"id":"83dIjw95L3rl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Testing the data\n","testing_data.columns\n","testing_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"hK5K-JUaJqx4","executionInfo":{"status":"ok","timestamp":1644069158066,"user_tz":-330,"elapsed":13,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"ff2fe64f-a684-4aec-f88e-e2028b3b5798"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-8dcdcdd6-82c1-4a3e-a873-020f7ce61dc6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>46311.746094</td>\n","      <td>47827.312500</td>\n","      <td>46288.484375</td>\n","      <td>47686.812500</td>\n","      <td>24582667004</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>47680.925781</td>\n","      <td>47881.406250</td>\n","      <td>46856.937500</td>\n","      <td>47345.218750</td>\n","      <td>27951569547</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>47343.542969</td>\n","      <td>47510.726563</td>\n","      <td>45835.964844</td>\n","      <td>46458.117188</td>\n","      <td>33071628362</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>46458.851563</td>\n","      <td>47406.546875</td>\n","      <td>45752.464844</td>\n","      <td>45897.574219</td>\n","      <td>42494677905</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>45899.359375</td>\n","      <td>46929.046875</td>\n","      <td>42798.222656</td>\n","      <td>43569.003906</td>\n","      <td>36851084859</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8dcdcdd6-82c1-4a3e-a873-020f7ce61dc6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8dcdcdd6-82c1-4a3e-a873-020f7ce61dc6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8dcdcdd6-82c1-4a3e-a873-020f7ce61dc6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["           Open          High           Low         Close       Volume\n","0  46311.746094  47827.312500  46288.484375  47686.812500  24582667004\n","1  47680.925781  47881.406250  46856.937500  47345.218750  27951569547\n","2  47343.542969  47510.726563  45835.964844  46458.117188  33071628362\n","3  46458.851563  47406.546875  45752.464844  45897.574219  42494677905\n","4  45899.359375  46929.046875  42798.222656  43569.003906  36851084859"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["new_output = linear_regrssion.predict([[46311.746094,\t47827.312500,\t46288.484375,\t24582667004]])\n","print(new_output)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-eJthvl4J6eO","executionInfo":{"status":"ok","timestamp":1644069219248,"user_tz":-330,"elapsed":346,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"1eccd693-acaa-4089-95b5-2471dff9bad6"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["[[45269.75401324]]\n"]}]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeRegressor \n","regressor = DecisionTreeRegressor(random_state = 0)\n","regressor.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eOXBD_vtKWbB","executionInfo":{"status":"ok","timestamp":1644069760766,"user_tz":-330,"elapsed":9,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"ff999e17-d04f-4a97-ded9-67a2a346665c"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(random_state=0)"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["y_pred = regressor.predict([[46311.746094,\t47827.312500,\t46288.484375,\t24582667004]])\n","y_pred = regressor.predict([[47680.925781,\t47881.406250,\t46856.937500,\t27951569547]])\n","\n","\n","\n"],"metadata":{"id":"kcbFN-P2Maof","executionInfo":{"status":"ok","timestamp":1644070269915,"user_tz":-330,"elapsed":1345,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xi4GmbEwMlQC","executionInfo":{"status":"ok","timestamp":1644070274603,"user_tz":-330,"elapsed":22,"user":{"displayName":"Mukesh Kumar Sharma","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjaX9QGXFhBEmlst3YCdGGilnVenAElWUSKEwyY=s64","userId":"13275291987474724825"}},"outputId":"adcbee7c-e356-4431-dca8-9edeac7709ba"},"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([47686.8125])"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":[""],"metadata":{"id":"0ZeYRAwUMzEZ"},"execution_count":null,"outputs":[]}]}